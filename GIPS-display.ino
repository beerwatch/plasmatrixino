#define PH_R  13
#define PH_1  12
#define PH_2  11
#define PH_3  10

#define ANODES  PORTC
#define ANODDR  DDRC

int phases[] = { PH_R, PH_1, PH_2, PH_3 };
byte cols[ 111 ] = { 0 };
#define BLANK (~0x00)
#define DLY_OVLAY delayMicroseconds(  1 )
#define DLY_BLANK delayMicroseconds(  3 )
#define DLY_ADISP delayMicroseconds( 85 )


/*! \file font5x7.h \brief Graphic LCD Font (Ascii Characters). */
//*****************************************************************************
//
// File Name  : 'font5x7.h'
// Title    : Graphic LCD Font (Ascii Charaters)
// Author   : Pascal Stang
// Date     : 10/19/2001
// Revised    : 10/19/2001
// Version    : 0.1
// Target MCU : Atmel AVR
// Editor Tabs  : 4
//
//*****************************************************************************

#ifndef FONT5X7_H
#define FONT5X7_H

// standard ascii 5x7 font
// defines ascii characters 0x20-0x7F (32-127)
static const byte 
//__attribute__ ((progmem)) 
Font5x7[] = {
  0x00, 0x00, 0x00, 0x00, 0x00,// (space)
  0x00, 0x00, 0x5F, 0x00, 0x00,// !
  0x00, 0x07, 0x00, 0x07, 0x00,// "
  0x14, 0x7F, 0x14, 0x7F, 0x14,// #
  0x24, 0x2A, 0x7F, 0x2A, 0x12,// $
  0x23, 0x13, 0x08, 0x64, 0x62,// %
  0x36, 0x49, 0x55, 0x22, 0x50,// &
  0x00, 0x05, 0x03, 0x00, 0x00,// '
  0x00, 0x1C, 0x22, 0x41, 0x00,// (
  0x00, 0x41, 0x22, 0x1C, 0x00,// )
  0x08, 0x2A, 0x1C, 0x2A, 0x08,// *
  0x08, 0x08, 0x3E, 0x08, 0x08,// +
  0x00, 0x50, 0x30, 0x00, 0x00,// ,
  0x08, 0x08, 0x08, 0x08, 0x00,// -
  0x00, 0x60, 0x60, 0x00, 0x00,// .
  0x20, 0x10, 0x08, 0x04, 0x02,// /
  0x3E, 0x51, 0x49, 0x45, 0x3E,// 0
  0x00, 0x42, 0x7F, 0x40, 0x00,// 1
  0x42, 0x61, 0x51, 0x49, 0x46,// 2
  0x21, 0x41, 0x45, 0x4B, 0x31,// 3
  0x18, 0x14, 0x12, 0x7F, 0x10,// 4
  0x27, 0x45, 0x45, 0x45, 0x39,// 5
  0x3C, 0x4A, 0x49, 0x49, 0x30,// 6
  0x01, 0x71, 0x09, 0x05, 0x03,// 7
  0x36, 0x49, 0x49, 0x49, 0x36,// 8
  0x06, 0x49, 0x49, 0x29, 0x1E,// 9
  0x00, 0x36, 0x36, 0x00, 0x00,// :
  0x00, 0x56, 0x36, 0x00, 0x00,// ;
  0x00, 0x08, 0x14, 0x22, 0x41,// <
  0x14, 0x14, 0x14, 0x14, 0x14,// =
  0x41, 0x22, 0x14, 0x08, 0x00,// >
  0x02, 0x01, 0x51, 0x09, 0x06,// ?
  0x32, 0x49, 0x79, 0x41, 0x3E,// @
  0x7E, 0x11, 0x11, 0x11, 0x7E,// A
  0x7F, 0x49, 0x49, 0x49, 0x36,// B
  0x3E, 0x41, 0x41, 0x41, 0x22,// C
  0x7F, 0x41, 0x41, 0x22, 0x1C,// D
  0x7F, 0x49, 0x49, 0x49, 0x41,// E
  0x7F, 0x09, 0x09, 0x01, 0x01,// F
  0x3E, 0x41, 0x41, 0x51, 0x32,// G
  0x7F, 0x08, 0x08, 0x08, 0x7F,// H
  0x00, 0x41, 0x7F, 0x41, 0x00,// I
  0x20, 0x40, 0x41, 0x3F, 0x01,// J
  0x7F, 0x08, 0x14, 0x22, 0x41,// K
  0x7F, 0x40, 0x40, 0x40, 0x40,// L
  0x7F, 0x02, 0x04, 0x02, 0x7F,// M
  0x7F, 0x04, 0x08, 0x10, 0x7F,// N
  0x3E, 0x41, 0x41, 0x41, 0x3E,// O
  0x7F, 0x09, 0x09, 0x09, 0x06,// P
  0x3E, 0x41, 0x51, 0x21, 0x5E,// Q
  0x7F, 0x09, 0x19, 0x29, 0x46,// R
  0x46, 0x49, 0x49, 0x49, 0x31,// S
  0x01, 0x01, 0x7F, 0x01, 0x01,// T
  0x3F, 0x40, 0x40, 0x40, 0x3F,// U
  0x1F, 0x20, 0x40, 0x20, 0x1F,// V
  0x7F, 0x20, 0x18, 0x20, 0x7F,// W
  0x63, 0x14, 0x08, 0x14, 0x63,// X
  0x03, 0x04, 0x78, 0x04, 0x03,// Y
  0x61, 0x51, 0x49, 0x45, 0x43,// Z
  0x00, 0x00, 0x7F, 0x41, 0x41,// [
  0x02, 0x04, 0x08, 0x10, 0x20,// "\"
  0x41, 0x41, 0x7F, 0x00, 0x00,// ]
  0x04, 0x02, 0x01, 0x02, 0x04,// ^
  0x40, 0x40, 0x40, 0x40, 0x40,// _
  0x00, 0x01, 0x02, 0x04, 0x00,// `
  0x20, 0x54, 0x54, 0x54, 0x78,// a
  0x7F, 0x48, 0x44, 0x44, 0x38,// b
  0x38, 0x44, 0x44, 0x44, 0x20,// c
  0x38, 0x44, 0x44, 0x48, 0x7F,// d
  0x38, 0x54, 0x54, 0x54, 0x18,// e
  0x08, 0x7E, 0x09, 0x01, 0x02,// f
  0x08, 0x14, 0x54, 0x54, 0x3C,// g
  0x7F, 0x08, 0x04, 0x04, 0x78,// h
  0x00, 0x44, 0x7D, 0x40, 0x00,// i
  0x20, 0x40, 0x44, 0x3D, 0x00,// j
  0x00, 0x7F, 0x10, 0x28, 0x44,// k
  0x00, 0x41, 0x7F, 0x40, 0x00,// l
  0x7C, 0x04, 0x18, 0x04, 0x78,// m
  0x7C, 0x08, 0x04, 0x04, 0x78,// n
  0x38, 0x44, 0x44, 0x44, 0x38,// o
  0x7C, 0x14, 0x14, 0x14, 0x08,// p
  0x08, 0x14, 0x14, 0x18, 0x7C,// q
  0x7C, 0x08, 0x04, 0x04, 0x08,// r
  0x48, 0x54, 0x54, 0x54, 0x20,// s
  0x04, 0x3F, 0x44, 0x40, 0x20,// t
  0x3C, 0x40, 0x40, 0x20, 0x7C,// u
  0x1C, 0x20, 0x40, 0x20, 0x1C,// v
  0x3C, 0x40, 0x30, 0x40, 0x3C,// w
  0x44, 0x28, 0x10, 0x28, 0x44,// x
  0x0C, 0x50, 0x50, 0x50, 0x3C,// y
  0x44, 0x64, 0x54, 0x4C, 0x44,// z
  0x00, 0x08, 0x36, 0x41, 0x00,// {
  0x00, 0x00, 0x7F, 0x00, 0x00,// |
  0x00, 0x41, 0x36, 0x08, 0x00,// }
  0x08, 0x08, 0x2A, 0x1C, 0x08,// ->
  0x08, 0x1C, 0x2A, 0x08, 0x08 // <-
};

#endif


void setup() {
  // put your setup code here, to run once:
  for( int i=0 ; i < sizeof(phases)/sizeof(phases[0]); ++i )
    digitalWrite( phases[ i ] , LOW );
  for( int i=0 ; i < sizeof(phases)/sizeof(phases[0]); ++i )
    pinMode( phases[ i ] , OUTPUT );
  ANODES = BLANK;
  ANODDR = 0xff;
//    cols[ icol ] = icol-100;
//  delay(1000);

//  return;

  int icol = 0;
  char *p = "";
//  p = "At zijou kocky!";
//  p = "Co chces napsat?";
//  p = "\e\fAhoj, svete! GIPS-16-1 At zijou kocky!";
  p = "\e\fAhoj svete! At zijou kocky!";
//  p = "\f\b\eGreyCortex\b\e ruleZ!";
//  p="\f*\bSedlackovi\b*";

  byte bBold = 0, bCondens = 0, bProport = 0;
  
  while( *p && icol < sizeof(cols)/sizeof(cols[0]) )
  {
    switch ( *p )
    {
      case '\b':
        bBold = 1 - bBold;
        break;

      case '\e':
        bCondens = 1 - bCondens;
        break;

      case '\f':
        bProport = 1 - bProport;
        break;

      default:
        byte * b = Font5x7 + 5 * ( (*p) - 32 );
        for( int jcol = 6 ; --jcol && icol < sizeof(cols)/sizeof(cols[0]) ; ++b )
        {
          if( bProport && ! *b && ( jcol <= 2 || jcol >= 4 ) )
            continue;

          if( !bCondens )
          {
            if( bBold )
            {
              cols[ icol++ ] |= *b;
              cols[ icol++ ] |= *b;
            }
            else
            {
              cols[ icol++ ] |= *b;
            }
          }
          else
          {
            if( bBold )
            {
              if ( jcol == 1 || jcol == 4 )
                --icol;
              cols[ icol++ ] |= *b;
              if ( jcol == 3 || jcol == 299 )
                --icol;
              cols[ icol++ ] |= *b;
            }
            else
            {
              if ( jcol == 2 )
                {--icol;cols[ icol++ ] |= *b;}
              else
                cols[ icol++ ] |= *b;
            }
          }
        }

        if( icol < sizeof(cols)/sizeof(cols[0]) )
          cols[ icol++ ] = 0x00;

    }
    ++p;
  }

//  for( int icol = 0 ; icol < sizeof(cols)/sizeof(cols[0]); ++icol )
//    cols[ icol ] ^= 0xff;
}

void scan()
{
  int ph_cur = 0, ph_new;
  ANODES = BLANK;
//  DLY_BLANK;
  digitalWrite( phases[ ph_cur ] , HIGH );
  DLY_ADISP;
  for( int icol = 0 ; icol < sizeof(cols)/sizeof(cols[0]); ++icol )
  {
    ph_new = 1 + ph_cur; if( ph_new >= sizeof(phases)/sizeof(phases[0]) ) ph_new = 1;
    digitalWrite( phases[ ph_new ] , HIGH );
    DLY_OVLAY;
    digitalWrite( phases[ ph_cur ] , LOW );
    ph_cur = ph_new;
    DLY_BLANK;
    ANODES = ~cols[ sizeof(cols)/sizeof(cols[0]) - 1 - icol ];
    DLY_ADISP;
    ANODES = BLANK;
  }
  digitalWrite( phases[ ph_cur ] , LOW );
}

int iloop = 0;

void loop() {
  // put your main code here, to run repeatedly:

  for( int icol = 0 ; icol < sizeof(cols)/sizeof(cols[0]); ++icol )
  {
//    cols[ icol ] ^= (icol-iloop/7)&64?0x55:0x00;
//    cols[ icol ] ^= (icol/5+iloop/26)&21?((icol/7-iloop/3)&4?0x55:0xaa):0xff;
    cols[ icol ] = ( -iloop/5 - icol );
  }
  
  scan();
  ++iloop;
//  if ( iloop % 32 == 0 )
//  {
//    for( int icol = 0 ; icol < sizeof(cols)/sizeof(cols[0]); ++icol )
//      cols[ icol ] ^= 0xff;
//  }
  
//  delay(15);
}

